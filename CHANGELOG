Version 4.4
===========

1. New selection for search variables in minizinc. Only output
   variables are selected by default.

2. Adding additional pass to the flatzinc compiler. bool2int does not
   generate the equality constraints on both variables. Only the first
   variable is used in the model and the second one as the alias for
   the first one. Decreases the number of generated constraints.

3. Sum and SumWeight are deprecated and SumInt, SumBool or LinearInt
   should be used instead.

4. New circuit and subcircuit constraint definitions in minizinc that
   accept arbitrary indexes (not always starting from 1).

5. New constraint SumBool.

6. Correcting a bug in OrBool constraint.

7. Xor of Linear constraint corrected. Linear is deprecated and
   LinearInt should be used instead.

8. Correcting a bug in GCC.

9. Improvements and corrections in Linear, LinearInt, SumInt,
   LinearIntDom and LinearFloat.

10. Bug fixes and improvements.

Version 4.3
===========
1. Implementation of constraints ArgMin and ArgMax as well connection to
   flatzinc constraints arg_min_int and arg_max_int.

2. Correcting implementation of Diff2 and Disjoint. Currently Diff2
   implements non-strict version of diffn constraint (minizinc constraint
   diffn_nonstrict) that makes it possible to pack zero-width rectangles
   anywhere. Disjoint implements a strict version of diffn constraint
   (minizinc diffn constraint). It requires that zero-width rectangles
   does not overlap with any other rectangle.
	
3. Implementation of primitive constraint BoolClause implementing flatzinc
   constraint bool_clause.
	
4. Sets of integer with bounds 1..0 are treated by flatzinc parser as
   empty sets. This implements a way minizinc 2.0 represents empty sets.

5. Adding int_pow build-in predicate to flatzinc interpreter.

6. LexOrder global constraints accepts vectors of different sizes.

7. Performance improvement for SumWeightDom.

8. Performance improvement for ElementInteger and two new constraints
   ElementIntegerFast and ElementVariableFast that implement a
   straightforward pruning method.

9. New primitive constraints LinearInt and SumInt that implement
   pruning methods from paper "Bounds Consistency Techniques for Long
   Linear Constraints" by Warwick Harvey and Joachim Schimpf.

10. Fixing performance bug in IntervalBasedBacktrackableManager.
    Unnecessary call to checkRemoveInvariant outside assert statement.

11. Adding option --bound (-b) to flatzinc parser that enforces use of bounds
    consistency for constraints (instead of domain, even for constraints
    annotated with "::domain").

12. Adding SAT solver to JaCoP and connecting it to flatzinc
    interpreter. The use of SAT solver in flatzinc is controlled by
    option -sat. If the option is specified the SAT solver is used for
    all bool_* constraints, otherwise CP constraints are used.

13. Improving performance of Max and Min constraints. Specially for
    large lists of varibales.

14. Bug fixes.
	
Version 4.2
===========
1. Support for minizinc 2.0
2. Constraint Geost avaible is now from minizinc.
3. Implementation of Solution-Guided Multi-Point Constructive Search.
4. Improvements in minimization method for floating-point variables.

Version 4.1.1
===========

1. New global constraint LexOrder that defines lexicographical order
   between two vectors of IntVar. Vectors must be of the same size.
2. Implementation of a loader for flazinc models and related examples. The
   loader makes it possible to load the model and then define own search
   methods as well as use all variables defined in the model and their values.
3. Performance improvements in AndBool and OrBool. it is no longer needed
   to scan the whole list for achieving consistency.
4. Checking for overflow in Sum and improvement in detecting overflow for
   addition.
5. Since domain consistency is computationally expensive minizinc uses
   domain consistency for linear constraints only when constrained are
   annotated ":: domain" and the size of maximal domains is <= 4 and
   there is no more than 2 variables.

Version 4.1
===========

1. New floating point variables and constraints on these variables.

2. Flatzinc interface for JaCoP's floating point constraints.

3. Scala interface for floating point constraints.

4. Fixing a bug in knapsack constraints when large numbers are used.

5. Implementing intersection method between SmallDenseDomain and BoundDomain.

Version 4.0
===========

1. Maven support and new directory structure. The package has changed name from JaCoP to org.jacop and files are placed in the new directory structure.

2. Experimental feature - stochastic variables and constraints - is moved to feature branch as it still requires additional testing.
   It is excluded from this release, but we encourage contribution in this branch (examples/tests in particular) to help us make it
   quicker a part of the next release.

3. Experimental feature SAT solver - JaSAT - is moved to experimental feature branch as its performance and integration with JaCoP still
   requires extra work. It is excluded from this release, but we encourage contribution in this branch to help us make it quicker a part
    of the next release.

4. Adding constraint SumWeightDom that implements domain consistency
   for weighted sum of linear terms.

5. New primitive constraint Linear and its use in flatzinc.

6. New global constraint Subcircuit.

7. Adding additional propagation to Min and Max constraint. It
   propagates in situations when one variable on the list is lowest
   (greatest). It enforces that this variable from the list is equal
   min (max) variable.

8. Print of statistics for flatzinc (org.jacop.fz.Fz2jacop) after Ctrl-C.

9. Updated JaCoP guide to reflect new features.

10. Bug fixes.

Version 3.2
=============

1. Fixes few bugs
2. Provides an interface from Scala to JaCoP. Examples using Scala are provided in ExamplesScala package.

Version 3.1.2
=============

The release of JaCoP version 3.1.2 fixes several bugs and makes JaCoP compatible with minizinc v.1.4.

1. Compatibility changes for minizinc 1.4.
2. Bug fix of reification in several primitive set constraints that made pruning working correctly.
3. New method for pruning length of rectangles in Diff/Diff2 constraints.
4. Several small bug fixes.
5. Bug fix in search to make limit on a number of solutions work correctly (specially for sequence search).

Version 3.1.1
=============

1. Changes to bo compatible with minizinc v. 1.3.
2. New pruning methods for multiplication and division constraints, icluding div and mod.
3. Bug fix in Among constraint.
4. Bug fix in SmallDenseDomain.


Version 3.1
===========

This release fixes few bugs as well as provides a new Binpacking constraint. 

The Binpacking constraint allows modeling of problems exhibiting bin
packing problem structure. The addition of this constraint introduced
changes to minizinc/fz library in JaCoP since the definitions of
bin_packing.mzn, bin_packin_capa.mzn and bin_packing_load.mzn have
been added. The JaCoP guide has been updated to explain how to use
Binpacking constraint.

Version 3.0
===========

We have just released JaCoP 3.0 final. Since the previous release
(RC2) we have fixed one rarely triggering bug in ElementInteger
constraint, as well as added code supporting generation of data for
CP-viz framework. Here is the list of most important changes since
version 2.4.

1) The introduction of Network Flow constraint, which allows efficient
  modeling of problems with network flow structure. The constraint
  allows to specify minimum cost flow problem in terms of finite
  domain variables.  It uses network simplex algorithm as an
  propagator for network-like structure. It is a very expressive
  constraint where arc flow and arc unit costs can be specified by
  variables.

2) The introduction of set package forced changes in the design of
  core interfaces. There are IntVar and SetVar classes which inherit
  from Var class. This change allowed to refactor and improve set package
  so it is designed in cleaner and more efficient manner.

3) The introduction of special domain representation SmallDenseDomain,
  which uses bits within a long primitive type to encode small
  domains of range not larger than 64.

4) The introduction of Soft-alldifferent as well as Soft-GCC global
  constraints. The soft-alldifferent constraint implements Variable
  and Decomposition based violation metrics. The soft-gcc constraint
  implements value based violation metric. Both are decomposed constraints
  based on network flow constraint.

5) Examples have been updated by moving multiple solving functionality
  from main function to test function, so user can easily see what is
  the best model just by looking at main function. BIBD example has
  been added.  Examples with Set variables have been updated to
  reflect the changes.

6) A number of bug fixes and changes in flatzinc interface to better
  comply with minizinc 1.1. We have also added into minizinc
  predicates networkflow that uses newly introduced JaCoP Network
  Flow constraint.

7) A number of minor API changes to improve intuitiveness of use
  (e.g. order of arguments in constructors).

8) The JaCoP guide has been updated to reflect the changes and additions
  to the newest version.

Version 2.4.2
=============

The main reason for this release is change of Minizinc standard, the
newest version handles Minizinc 1.1.

Version 2.4.1
=============

???

Version 2.4
===========

The version 2.4 has a number of new features in addition to some bug
fixes. The most important additions in this version are:

The flatzinc interface that makes it possible to run minizinc programs
using JaCoP. The distribution contains number of different minizinc
examples.

Geometrical constraint, geost, based on pruning algorithms originally
proposed by Nicolas Beldiceanu et al. This constraint makes it
possible to define placement problems of non-convex objects in
k-dimensional space.

Knapsack constraint, which is based on the work published by Irit
Katriel et al. We extend the original work in number of ways, for
example by making it possible to use non-boolean quantity variables.

Set constraints defining typical operation on sets using set interval
variables.

Version 2.3
===========

As with previous releases, JaCoP focuses on ease of use, efficiency,
and modeling power by providing more and more global constraints.

In JaCoP 2.3 you'll notice:

Number of new global constraints implemented, namely Among, GCC,
Regular, two new variants of ExtensionalSupport constraint (STR, MDD),
Stretch, and Sequence constraints.

Redesigned search functionality making it possible to express search
as by designing search plugins and transforming available search.

Redesigned part of the JaCoP core focusing on domains, making it
easier to add new domains representations.

Significantly improved Java Doc API making code even better
documented.

Number of new examples explaining how to apply CP technology.


Version JaCoP 2.2 
=================


Version JaCoP 2.1 
=================

Version JaCoP 1.7 
=================

Version JaCoP 1.3 
=================
