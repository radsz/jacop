predicate jacop_diff2(array [int, int] of var int: r);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
array [1..28] of set of int: dependencies = [9..9, 9..9, 10..10, 10..10, 11..11, 11..11, 12..12, 12..12, 27..27, 28..28, 13..13, 14..14, 16..17, {15, 18}, 19..19, 19..19, 20..20, 20..20, 22..23, {21, 24}, 25..25, 25..25, 26..26, 26..26, 27..27, 28..28, {}, {}];
var 1..101: INT____00001 :: is_defined_var :: var_is_introduced;
var 1..101: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..101: INT____00003 :: is_defined_var :: var_is_introduced;
var 1..101: INT____00004 :: is_defined_var :: var_is_introduced;
array [1..28] of var 1..2: d = [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1];
var int: end :: output_var;
var 1..2: limit_adders;
var 1..2: limit_multipliers;
array [1..28] of var 1..10: r :: output_array([1..28]);
array [1..28] of var 0..100: t :: output_array([1..28]);
array [1..12] of var 0..100: t_add = [t[9], t[10], t[11], t[12], t[13], t[14], t[19], t[20], t[25], t[26], t[27], t[28]];
array [1..16] of var 0..100: t_mul = [t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[15], t[16], t[17], t[18], t[21], t[22], t[23], t[24]];
constraint int_le(r[1], 2);
constraint int_le(r[2], 2);
constraint int_le(r[3], 2);
constraint int_le(r[4], 2);
constraint int_le(r[5], 2);
constraint int_le(r[6], 2);
constraint int_le(r[7], 2);
constraint int_le(r[8], 2);
constraint int_le(r[9], 2);
constraint int_le(r[10], 2);
constraint int_le(r[11], 2);
constraint int_le(r[12], 2);
constraint int_le(r[13], 2);
constraint int_le(r[14], 2);
constraint int_le(r[15], 2);
constraint int_le(r[16], 2);
constraint int_le(r[17], 2);
constraint int_le(r[18], 2);
constraint int_le(r[19], 2);
constraint int_le(r[20], 2);
constraint int_le(r[21], 2);
constraint int_le(r[22], 2);
constraint int_le(r[23], 2);
constraint int_le(r[24], 2);
constraint int_le(r[25], 2);
constraint int_le(r[26], 2);
constraint int_le(r[27], 2);
constraint int_le(r[28], 2);
constraint int_lin_eq([-1, 1], [INT____00001, t[13]], -1) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 1], [INT____00002, t[14]], -1) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 1], [INT____00003, t[27]], -1) :: defines_var(INT____00003);
constraint int_lin_eq([-1, 1], [INT____00004, t[28]], -1) :: defines_var(INT____00004);
constraint int_lin_le([1, -1], [t[1], t[9]], -2);
constraint int_lin_le([1, -1], [t[2], t[9]], -2);
constraint int_lin_le([1, -1], [t[3], t[10]], -2);
constraint int_lin_le([1, -1], [t[4], t[10]], -2);
constraint int_lin_le([1, -1], [t[5], t[11]], -2);
constraint int_lin_le([1, -1], [t[6], t[11]], -2);
constraint int_lin_le([1, -1], [t[7], t[12]], -2);
constraint int_lin_le([1, -1], [t[8], t[12]], -2);
constraint int_lin_le([1, -1], [t[9], t[27]], -1);
constraint int_lin_le([1, -1], [t[10], t[28]], -1);
constraint int_lin_le([1, -1], [t[11], t[13]], -1);
constraint int_lin_le([1, -1], [t[12], t[14]], -1);
constraint int_lin_le([1, -1], [t[13], t[16]], -1);
constraint int_lin_le([1, -1], [t[13], t[17]], -1);
constraint int_lin_le([1, -1], [t[14], t[15]], -1);
constraint int_lin_le([1, -1], [t[14], t[18]], -1);
constraint int_lin_le([1, -1], [t[15], t[19]], -2);
constraint int_lin_le([1, -1], [t[16], t[19]], -2);
constraint int_lin_le([1, -1], [t[17], t[20]], -2);
constraint int_lin_le([1, -1], [t[18], t[20]], -2);
constraint int_lin_le([1, -1], [t[19], t[22]], -1);
constraint int_lin_le([1, -1], [t[19], t[23]], -1);
constraint int_lin_le([1, -1], [t[20], t[21]], -1);
constraint int_lin_le([1, -1], [t[20], t[24]], -1);
constraint int_lin_le([1, -1], [t[21], t[25]], -2);
constraint int_lin_le([1, -1], [t[22], t[25]], -2);
constraint int_lin_le([1, -1], [t[23], t[26]], -2);
constraint int_lin_le([1, -1], [t[24], t[26]], -2);
constraint int_lin_le([1, -1], [t[25], t[27]], -1);
constraint int_lin_le([1, -1], [t[26], t[28]], -1);
constraint jacop_list_diff2([t[9], t[10], t[11], t[12], t[13], t[14], t[19], t[20], t[25], t[26], t[27], t[28]], [r[9], r[10], r[11], r[12], r[13], r[14], r[19], r[20], r[25], r[26], r[27], r[28]], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
constraint jacop_list_diff2([t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[15], t[16], t[17], t[18], t[21], t[22], t[23], t[24]], [r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[15], r[16], r[17], r[18], r[21], r[22], r[23], r[24]], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
constraint jacop_maximum(end, [INT____00001, INT____00002, INT____00003, INT____00004]);
solve  :: seq_search([int_search(t, smallest, indomain_min, complete), int_search(r, input_order, indomain_min, complete)]) minimize end;
