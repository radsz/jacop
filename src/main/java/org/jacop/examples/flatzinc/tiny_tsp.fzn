array [1..16] of float: d = [0.0, 2.23606797749979, 2.23606797749979, 3.605551275463989, 2.23606797749979, 0.0, 1.4142135623730951, 1.4142135623730951, 2.23606797749979, 1.4142135623730951, 0.0, 2.0, 3.605551275463989, 1.4142135623730951, 2.0, 0.0];
array [1..4] of float: x = [0.0, 1.0, 2.0, 2.0];
array [1..4] of float: y = [3.0, 1.0, 2.0, 0.0];
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var 0.0..3.605551275463989: FLOAT____00001 :: is_defined_var :: var_is_introduced;
var 0.0..3.605551275463989: FLOAT____00003 :: is_defined_var :: var_is_introduced;
var 0.0..3.605551275463989: FLOAT____00005 :: is_defined_var :: var_is_introduced;
var 0.0..3.605551275463989: FLOAT____00007 :: is_defined_var :: var_is_introduced;
var 0.0..14.422205101855956: FLOAT____00008 :: is_defined_var :: var_is_introduced;
var 5..8: INT____00002 :: is_defined_var :: var_is_introduced;
var 9..12: INT____00004 :: is_defined_var :: var_is_introduced;
var 13..16: INT____00006 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00011 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00014 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00017 :: is_defined_var :: var_is_introduced;
var 1..4: INT____00020 :: is_defined_var :: var_is_introduced;
var 0.0..14.422205101855956: dist :: output_var = FLOAT____00008;
array [1..4] of var 1..4: order____00009;
array [1..4] of var 1..4: visit :: output_array([1..4]);
constraint array_float_element(INT____00002, d, FLOAT____00003) :: defines_var(FLOAT____00003);
constraint array_float_element(INT____00004, d, FLOAT____00005) :: defines_var(FLOAT____00005);
constraint array_float_element(INT____00006, d, FLOAT____00007) :: defines_var(FLOAT____00007);
constraint array_float_element(visit[1], d, FLOAT____00001) :: defines_var(FLOAT____00001);
constraint array_var_int_element(visit[1], order____00009, INT____00011) :: defines_var(INT____00011);
constraint array_var_int_element(visit[2], order____00009, INT____00014) :: defines_var(INT____00014);
constraint array_var_int_element(visit[3], order____00009, INT____00017) :: defines_var(INT____00017);
constraint array_var_int_element(visit[4], order____00009, INT____00020) :: defines_var(INT____00020);
constraint bool_le(BOOL____00010, BOOL____00012);
constraint bool_le(BOOL____00013, BOOL____00015);
constraint bool_le(BOOL____00016, BOOL____00018);
constraint bool_le(BOOL____00019, BOOL____00021);
constraint bool_le(BOOL____00022, BOOL____00023);
constraint bool_le(BOOL____00024, BOOL____00025);
constraint bool_le(BOOL____00026, BOOL____00027);
constraint bool_le(BOOL____00028, BOOL____00029);
constraint float_lin_eq([-1.0, 1.0, 1.0, 1.0, 1.0], [FLOAT____00008, FLOAT____00001, FLOAT____00003, FLOAT____00005, FLOAT____00007], 0.0) :: defines_var(FLOAT____00008);
constraint int_eq(order____00009[1], 1);
constraint int_eq_reif(4, order____00009[1], BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(4, order____00009[2], BOOL____00024) :: defines_var(BOOL____00024);
constraint int_eq_reif(4, order____00009[3], BOOL____00026) :: defines_var(BOOL____00026);
constraint int_eq_reif(4, order____00009[4], BOOL____00028) :: defines_var(BOOL____00028);
constraint int_eq_reif(visit[1], 1, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(visit[2], 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(visit[3], 1, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(visit[4], 1, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_lin_eq([-1, 1], [INT____00002, visit[2]], -4) :: defines_var(INT____00002) :: domain;
constraint int_lin_eq([-1, 1], [INT____00004, visit[3]], -8) :: defines_var(INT____00004) :: domain;
constraint int_lin_eq([-1, 1], [INT____00006, visit[4]], -12) :: defines_var(INT____00006) :: domain;
constraint int_lin_eq_reif([1, -1], [INT____00011, order____00009[1]], 1, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_eq_reif([1, -1], [INT____00014, order____00009[2]], 1, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_lin_eq_reif([1, -1], [INT____00017, order____00009[3]], 1, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_lin_eq_reif([1, -1], [INT____00020, order____00009[4]], 1, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_ne(order____00009[1], order____00009[2]);
constraint int_ne(order____00009[1], order____00009[3]);
constraint int_ne(order____00009[1], order____00009[4]);
constraint int_ne(order____00009[2], order____00009[3]);
constraint int_ne(order____00009[2], order____00009[4]);
constraint int_ne(order____00009[3], order____00009[4]);
constraint int_ne(visit[1], 1);
constraint int_ne(visit[1], visit[2]);
constraint int_ne(visit[1], visit[3]);
constraint int_ne(visit[1], visit[4]);
constraint int_ne(visit[2], 2);
constraint int_ne(visit[2], visit[3]);
constraint int_ne(visit[2], visit[4]);
constraint int_ne(visit[3], 3);
constraint int_ne(visit[3], visit[4]);
constraint int_ne(visit[4], 4);
constraint int_ne_reif(order____00009[1], 4, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_ne_reif(order____00009[2], 4, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_ne_reif(order____00009[3], 4, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_ne_reif(order____00009[4], 4, BOOL____00019) :: defines_var(BOOL____00019);
solve minimize FLOAT____00008;
