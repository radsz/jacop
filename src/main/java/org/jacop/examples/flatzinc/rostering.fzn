predicate jacop_alldiff(array [int] of var int: x);
predicate jacop_among(array [int] of var int: x, set of int: v, var int: n);
predicate jacop_among_var(array [int] of var int: x, array [int] of var int: v, var int: n);
predicate jacop_assignment(array [int] of var int: f, array [int] of var int: invf, int: index_f, int: index_invf);
predicate jacop_bin_packing(array [int] of var int: bin, array [int] of var int: cap, array [int] of int: w);
predicate jacop_circuit(array [int] of var int: x);
predicate jacop_count(array [int] of var int: x, int: y, var int: c);
predicate jacop_cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate jacop_diff2(array [int, int] of var int: r);
predicate jacop_disjoint(var set of int: s1, var set of int: s2);
predicate jacop_gcc(array [int] of var int: x, array [int] of var int: c, int: index);
predicate jacop_global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate jacop_global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate jacop_lex_less_bool(array [int] of var bool: x, array [int] of var bool: y);
predicate jacop_lex_less_int(array [int] of var int: x, array [int] of var int: y);
predicate jacop_lex_lesseq_bool(array [int] of var bool: x, array [int] of var bool: y);
predicate jacop_lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
predicate jacop_minimum(var int: m, array [int] of var int: x);
predicate jacop_nvalue(var int: n, array [int] of var int: x);
predicate jacop_regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F, int: min_index);
predicate jacop_subcircuit(array [int] of var int: x);
predicate jacop_table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate jacop_table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..28] of var 0..1: A :: output_array([1..4, 1..7]);
array [1..21] of var 0..1: B :: output_array([1..3, 1..7]);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
array [1..14] of var 0..1: C :: output_array([1..2, 1..7]);
constraint array_bool_or([BOOL____00001, BOOL____00002], true);
constraint array_bool_or([BOOL____00003, BOOL____00004], true);
constraint array_bool_or([BOOL____00005, BOOL____00006], true);
constraint array_bool_or([BOOL____00007, BOOL____00008], true);
constraint array_bool_or([BOOL____00009, BOOL____00010], true);
constraint array_bool_or([BOOL____00011, BOOL____00012], true);
constraint array_bool_or([BOOL____00013, BOOL____00014], true);
constraint bool_le(BOOL____00022, BOOL____00023);
constraint bool_le(BOOL____00024, BOOL____00025);
constraint bool_le(BOOL____00026, BOOL____00027);
constraint bool_le(BOOL____00028, BOOL____00029);
constraint bool_le(BOOL____00030, BOOL____00031);
constraint bool_le(BOOL____00032, BOOL____00033);
constraint bool_le(BOOL____00034, BOOL____00035);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [A[1], A[2], A[3], A[4], A[5], A[6], A[7]], 5);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [A[8], A[9], A[10], A[11], A[12], A[13], A[14]], 5);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [A[15], A[16], A[17], A[18], A[19], A[20], A[21]], 5);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [A[22], A[23], A[24], A[25], A[26], A[27], A[28]], 5);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [B[1], B[2], B[3], B[4], B[5], B[6], B[7]], 4);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [B[8], B[9], B[10], B[11], B[12], B[13], B[14]], 4);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [B[15], B[16], B[17], B[18], B[19], B[20], B[21]], 4);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [C[1], C[2], C[3], C[4], C[5], C[6], C[7]], 5);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [C[8], C[9], C[10], C[11], C[12], C[13], C[14]], 5);
constraint int_lin_eq_reif([-1, -1, -1], [B[1], B[8], B[15]], -3, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_lin_eq_reif([-1, -1, -1], [B[2], B[9], B[16]], -3, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_lin_eq_reif([-1, -1, -1], [B[3], B[10], B[17]], -3, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_lin_eq_reif([-1, -1, -1], [B[4], B[11], B[18]], -3, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_lin_eq_reif([-1, -1, -1], [B[5], B[12], B[19]], -3, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_lin_eq_reif([-1, -1, -1], [B[6], B[13], B[20]], -3, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_lin_eq_reif([-1, -1, -1], [B[7], B[14], B[21]], -3, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_lin_eq_reif([-1, -1, -1, -1], [A[1], A[8], A[15], A[22]], -2, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_lin_eq_reif([-1, -1, -1, -1], [A[2], A[9], A[16], A[23]], -2, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_lin_eq_reif([-1, -1, -1, -1], [A[3], A[10], A[17], A[24]], -2, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_lin_eq_reif([-1, -1, -1, -1], [A[4], A[11], A[18], A[25]], -2, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_lin_eq_reif([-1, -1, -1, -1], [A[5], A[12], A[19], A[26]], -2, BOOL____00030) :: defines_var(BOOL____00030);
constraint int_lin_eq_reif([-1, -1, -1, -1], [A[6], A[13], A[20], A[27]], -2, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_lin_eq_reif([-1, -1, -1, -1], [A[7], A[14], A[21], A[28]], -2, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1], [A[1], A[8], A[15], A[22], B[1], B[8], B[15], C[1], C[8]], -6);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1], [A[2], A[9], A[16], A[23], B[2], B[9], B[16], C[2], C[9]], -6);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1], [A[3], A[10], A[17], A[24], B[3], B[10], B[17], C[3], C[10]], -6);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1], [A[4], A[11], A[18], A[25], B[4], B[11], B[18], C[4], C[11]], -6);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1], [A[5], A[12], A[19], A[26], B[5], B[12], B[19], C[5], C[12]], -6);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1], [A[6], A[13], A[20], A[27], B[6], B[13], B[20], C[6], C[13]], -6);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1], [A[7], A[14], A[21], A[28], B[7], B[14], B[21], C[7], C[14]], -6);
constraint int_lin_ne([-1, -1, -1], [B[1], B[2], B[3]], -3);
constraint int_lin_ne([-1, -1, -1], [B[1], B[2], B[7]], -3);
constraint int_lin_ne([-1, -1, -1], [B[1], B[6], B[7]], -3);
constraint int_lin_ne([-1, -1, -1], [B[2], B[3], B[4]], -3);
constraint int_lin_ne([-1, -1, -1], [B[3], B[4], B[5]], -3);
constraint int_lin_ne([-1, -1, -1], [B[4], B[5], B[6]], -3);
constraint int_lin_ne([-1, -1, -1], [B[5], B[6], B[7]], -3);
constraint int_lin_ne([-1, -1, -1], [B[8], B[9], B[10]], -3);
constraint int_lin_ne([-1, -1, -1], [B[8], B[9], B[14]], -3);
constraint int_lin_ne([-1, -1, -1], [B[8], B[13], B[14]], -3);
constraint int_lin_ne([-1, -1, -1], [B[9], B[10], B[11]], -3);
constraint int_lin_ne([-1, -1, -1], [B[10], B[11], B[12]], -3);
constraint int_lin_ne([-1, -1, -1], [B[11], B[12], B[13]], -3);
constraint int_lin_ne([-1, -1, -1], [B[12], B[13], B[14]], -3);
constraint int_lin_ne([-1, -1, -1], [B[15], B[16], B[17]], -3);
constraint int_lin_ne([-1, -1, -1], [B[15], B[16], B[21]], -3);
constraint int_lin_ne([-1, -1, -1], [B[15], B[20], B[21]], -3);
constraint int_lin_ne([-1, -1, -1], [B[16], B[17], B[18]], -3);
constraint int_lin_ne([-1, -1, -1], [B[17], B[18], B[19]], -3);
constraint int_lin_ne([-1, -1, -1], [B[18], B[19], B[20]], -3);
constraint int_lin_ne([-1, -1, -1], [B[19], B[20], B[21]], -3);
constraint int_lin_ne([-1, -1, -1, -1], [A[1], A[2], A[3], A[4]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[1], A[2], A[3], A[7]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[1], A[2], A[6], A[7]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[1], A[5], A[6], A[7]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[2], A[3], A[4], A[5]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[3], A[4], A[5], A[6]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[4], A[5], A[6], A[7]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[8], A[9], A[10], A[11]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[8], A[9], A[10], A[14]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[8], A[9], A[13], A[14]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[8], A[12], A[13], A[14]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[9], A[10], A[11], A[12]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[10], A[11], A[12], A[13]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[11], A[12], A[13], A[14]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[15], A[16], A[17], A[18]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[15], A[16], A[17], A[21]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[15], A[16], A[20], A[21]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[15], A[19], A[20], A[21]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[16], A[17], A[18], A[19]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[17], A[18], A[19], A[20]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[18], A[19], A[20], A[21]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[22], A[23], A[24], A[25]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[22], A[23], A[24], A[28]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[22], A[23], A[27], A[28]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[22], A[26], A[27], A[28]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[23], A[24], A[25], A[26]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[24], A[25], A[26], A[27]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [A[25], A[26], A[27], A[28]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[1], C[2], C[3], C[4]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[1], C[2], C[3], C[7]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[1], C[2], C[6], C[7]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[1], C[5], C[6], C[7]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[2], C[3], C[4], C[5]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[3], C[4], C[5], C[6]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[4], C[5], C[6], C[7]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[8], C[9], C[10], C[11]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[8], C[9], C[10], C[14]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[8], C[9], C[13], C[14]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[8], C[12], C[13], C[14]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[9], C[10], C[11], C[12]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[10], C[11], C[12], C[13]], -4);
constraint int_lin_ne([-1, -1, -1, -1], [C[11], C[12], C[13], C[14]], -4);
constraint int_lin_ne_reif([1, 1], [C[1], C[8]], 2, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_lin_ne_reif([1, 1], [C[2], C[9]], 2, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_ne_reif([1, 1], [C[3], C[10]], 2, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_lin_ne_reif([1, 1], [C[4], C[11]], 2, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lin_ne_reif([1, 1], [C[5], C[12]], 2, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_lin_ne_reif([1, 1], [C[6], C[13]], 2, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_ne_reif([1, 1], [C[7], C[14]], 2, BOOL____00014) :: defines_var(BOOL____00014);
constraint int_lin_ne_reif([1, 1, 1, 1], [A[1], A[8], A[15], A[22]], 2, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_lin_ne_reif([1, 1, 1, 1], [A[2], A[9], A[16], A[23]], 2, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lin_ne_reif([1, 1, 1, 1], [A[3], A[10], A[17], A[24]], 2, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_lin_ne_reif([1, 1, 1, 1], [A[4], A[11], A[18], A[25]], 2, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lin_ne_reif([1, 1, 1, 1], [A[5], A[12], A[19], A[26]], 2, BOOL____00009) :: defines_var(BOOL____00009);
constraint int_lin_ne_reif([1, 1, 1, 1], [A[6], A[13], A[20], A[27]], 2, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lin_ne_reif([1, 1, 1, 1], [A[7], A[14], A[21], A[28]], 2, BOOL____00013) :: defines_var(BOOL____00013);
solve satisfy;
