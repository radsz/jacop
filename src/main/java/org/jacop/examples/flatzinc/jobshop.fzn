predicate jacop_alldiff(array [int] of var int: x);
predicate jacop_among(array [int] of var int: x, set of int: v, var int: n);
predicate jacop_among_var(array [int] of var int: x, array [int] of var int: v, var int: n);
predicate jacop_assignment(array [int] of var int: f, array [int] of var int: invf, int: index_f, int: index_invf);
predicate jacop_bin_packing(array [int] of var int: bin, array [int] of var int: cap, array [int] of int: w);
predicate jacop_circuit(array [int] of var int: x);
predicate jacop_count(array [int] of var int: x, int: y, var int: c);
predicate jacop_cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate jacop_diff2(array [int, int] of var int: r);
predicate jacop_disjoint(var set of int: s1, var set of int: s2);
predicate jacop_gcc(array [int] of var int: x, array [int] of var int: c, int: index);
predicate jacop_global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate jacop_global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate jacop_lex_less_bool(array [int] of var bool: x, array [int] of var bool: y);
predicate jacop_lex_less_int(array [int] of var int: x, array [int] of var int: y);
predicate jacop_lex_lesseq_bool(array [int] of var bool: x, array [int] of var bool: y);
predicate jacop_lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
predicate jacop_minimum(var int: m, array [int] of var int: x);
predicate jacop_nvalue(var int: n, array [int] of var int: x);
predicate jacop_regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F, int: min_index);
predicate jacop_subcircuit(array [int] of var int: x);
predicate jacop_table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate jacop_table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..100] of int: job = [1, 21, 0, 53, 4, 95, 3, 55, 2, 34, 0, 21, 3, 52, 4, 16, 2, 26, 1, 71, 3, 39, 4, 98, 1, 42, 2, 31, 0, 12, 1, 77, 0, 55, 4, 79, 2, 66, 3, 77, 0, 83, 3, 34, 2, 64, 1, 19, 4, 37, 1, 54, 2, 43, 4, 79, 0, 92, 3, 62, 3, 69, 4, 77, 1, 87, 2, 87, 0, 93, 2, 38, 0, 60, 1, 41, 3, 24, 4, 83, 3, 17, 1, 49, 4, 25, 0, 44, 2, 98, 4, 77, 3, 79, 2, 43, 1, 75, 0, 96];
array [1..10] of int: one = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
var 34..2034: INT____00001 :: is_defined_var :: var_is_introduced;
var 71..2071: INT____00002 :: is_defined_var :: var_is_introduced;
var 12..2012: INT____00003 :: is_defined_var :: var_is_introduced;
var 77..2077: INT____00004 :: is_defined_var :: var_is_introduced;
var 37..2037: INT____00005 :: is_defined_var :: var_is_introduced;
var 62..2062: INT____00006 :: is_defined_var :: var_is_introduced;
var 93..2093: INT____00007 :: is_defined_var :: var_is_introduced;
var 83..2083: INT____00008 :: is_defined_var :: var_is_introduced;
var 98..2098: INT____00009 :: is_defined_var :: var_is_introduced;
var 96..2096: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..2000: end :: output_var;
array [1..50] of var 0..2000: t :: output_array([1..10, 1..5]);
constraint int_lin_eq([-1, 1], [INT____00001, t[5]], -34) :: defines_var(INT____00001);
constraint int_lin_eq([-1, 1], [INT____00002, t[10]], -71) :: defines_var(INT____00002);
constraint int_lin_eq([-1, 1], [INT____00003, t[15]], -12) :: defines_var(INT____00003);
constraint int_lin_eq([-1, 1], [INT____00004, t[20]], -77) :: defines_var(INT____00004);
constraint int_lin_eq([-1, 1], [INT____00005, t[25]], -37) :: defines_var(INT____00005);
constraint int_lin_eq([-1, 1], [INT____00006, t[30]], -62) :: defines_var(INT____00006);
constraint int_lin_eq([-1, 1], [INT____00007, t[35]], -93) :: defines_var(INT____00007);
constraint int_lin_eq([-1, 1], [INT____00008, t[40]], -83) :: defines_var(INT____00008);
constraint int_lin_eq([-1, 1], [INT____00009, t[45]], -98) :: defines_var(INT____00009);
constraint int_lin_eq([-1, 1], [INT____00010, t[50]], -96) :: defines_var(INT____00010);
constraint int_lin_le([1, -1], [t[1], t[2]], -21);
constraint int_lin_le([1, -1], [t[2], t[3]], -53);
constraint int_lin_le([1, -1], [t[3], t[4]], -95);
constraint int_lin_le([1, -1], [t[4], t[5]], -55);
constraint int_lin_le([1, -1], [t[6], t[7]], -21);
constraint int_lin_le([1, -1], [t[7], t[8]], -52);
constraint int_lin_le([1, -1], [t[8], t[9]], -16);
constraint int_lin_le([1, -1], [t[9], t[10]], -26);
constraint int_lin_le([1, -1], [t[11], t[12]], -39);
constraint int_lin_le([1, -1], [t[12], t[13]], -98);
constraint int_lin_le([1, -1], [t[13], t[14]], -42);
constraint int_lin_le([1, -1], [t[14], t[15]], -31);
constraint int_lin_le([1, -1], [t[16], t[17]], -77);
constraint int_lin_le([1, -1], [t[17], t[18]], -55);
constraint int_lin_le([1, -1], [t[18], t[19]], -79);
constraint int_lin_le([1, -1], [t[19], t[20]], -66);
constraint int_lin_le([1, -1], [t[21], t[22]], -83);
constraint int_lin_le([1, -1], [t[22], t[23]], -34);
constraint int_lin_le([1, -1], [t[23], t[24]], -64);
constraint int_lin_le([1, -1], [t[24], t[25]], -19);
constraint int_lin_le([1, -1], [t[26], t[27]], -54);
constraint int_lin_le([1, -1], [t[27], t[28]], -43);
constraint int_lin_le([1, -1], [t[28], t[29]], -79);
constraint int_lin_le([1, -1], [t[29], t[30]], -92);
constraint int_lin_le([1, -1], [t[31], t[32]], -69);
constraint int_lin_le([1, -1], [t[32], t[33]], -77);
constraint int_lin_le([1, -1], [t[33], t[34]], -87);
constraint int_lin_le([1, -1], [t[34], t[35]], -87);
constraint int_lin_le([1, -1], [t[36], t[37]], -38);
constraint int_lin_le([1, -1], [t[37], t[38]], -60);
constraint int_lin_le([1, -1], [t[38], t[39]], -41);
constraint int_lin_le([1, -1], [t[39], t[40]], -24);
constraint int_lin_le([1, -1], [t[41], t[42]], -17);
constraint int_lin_le([1, -1], [t[42], t[43]], -49);
constraint int_lin_le([1, -1], [t[43], t[44]], -25);
constraint int_lin_le([1, -1], [t[44], t[45]], -44);
constraint int_lin_le([1, -1], [t[46], t[47]], -77);
constraint int_lin_le([1, -1], [t[47], t[48]], -79);
constraint int_lin_le([1, -1], [t[48], t[49]], -43);
constraint int_lin_le([1, -1], [t[49], t[50]], -75);
constraint jacop_cumulative([t[1], t[10], t[13], t[16], t[24], t[26], t[33], t[38], t[42], t[49]], [21, 71, 42, 77, 19, 54, 87, 41, 49, 75], one, 1) :: bounds;
constraint jacop_cumulative([t[2], t[6], t[15], t[17], t[21], t[29], t[35], t[37], t[44], t[50]], [53, 21, 12, 55, 83, 92, 93, 60, 44, 96], one, 1) :: bounds;
constraint jacop_cumulative([t[3], t[8], t[12], t[18], t[25], t[28], t[32], t[40], t[43], t[46]], [95, 16, 98, 79, 37, 79, 77, 83, 25, 77], one, 1) :: bounds;
constraint jacop_cumulative([t[4], t[7], t[11], t[20], t[22], t[30], t[31], t[39], t[41], t[47]], [55, 52, 39, 77, 34, 62, 69, 24, 17, 79], one, 1) :: bounds;
constraint jacop_cumulative([t[5], t[9], t[14], t[19], t[23], t[27], t[34], t[36], t[45], t[48]], [34, 26, 31, 66, 64, 43, 87, 38, 98, 43], one, 1) :: bounds;
constraint jacop_maximum(end, [INT____00001, INT____00002, INT____00003, INT____00004, INT____00005, INT____00006, INT____00007, INT____00008, INT____00009, INT____00010]);
solve  :: int_search([t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15], t[16], t[17], t[18], t[19], t[20], t[21], t[22], t[23], t[24], t[25], t[26], t[27], t[28], t[29], t[30], t[31], t[32], t[33], t[34], t[35], t[36], t[37], t[38], t[39], t[40], t[41], t[42], t[43], t[44], t[45], t[46], t[47], t[48], t[49], t[50]], smallest, indomain_split, complete) minimize end;
